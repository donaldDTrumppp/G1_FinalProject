@page
@model Clinic_Management.Pages.Admin.CreateModel

@{
    ViewData["Title"] = "Create";
}

<div id="toast-danger" class="flex hidden animate-[fade-out_2s_ease-out_1s_1_forwards] opacity-1 flex-col fixed z-50 top-5 right-5 items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="flex flex-row items-center justify-between w-full">
        <div class="flex flex-row items-center">
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
                <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z" />
                </svg>
                <span class="sr-only">Error icon</span>
            </div>
            <div class="ms-3 text-sm font-normal"><span id="toast-er-message">An error has occured. Please try again</span></div>
        </div>
        <div>
            <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-danger" aria-label="Close">
                <span class="sr-only">Close</span>
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
            </button>
        </div>
    </div>
    <div class="flex flex-row items-center justify-between w-full">
        <div class="w-full bg-gray-200 rounded-full h-1.5 mb-1 mt-2 dark:bg-gray-700">
            <div id="animateDiv1" class="bg-red-400 h-1.5 rounded-full dark:bg-green-300 animate-[reduce_2s_ease-in-out_0s_1_forwards]" style="width: 100%"></div>
        </div>
    </div>

</div>



<div id="notverify" style="display: block">
    <!--<button onclick="swtch2()">Click</button>-->
    <header class="my-6">
        <h3 class="text-center font-semibold uppercase text-gray-300">Basiha Medical - your mom</h3>
        <p class="text-center font-extrabold text-sky-700 tracking-tight text-5xl">User Management</p>
        <h4 class="font-medium text-center text-red-500 mt-1">** Fill all field **</h4>
    </header>



    <form id="form" method="post" class="max-w-2xl mx-auto">
        <!--<div id="toast-top-right" class="fixed flex z-50 items-center w-full max-w-xs p-4 space-x-4 text-gray-500 bg-white divide-x rtl:divide-x-reverse divide-gray-200 rounded-lg shadow fixed top-5 right-5 dark:text-gray-400 dark:divide-gray-700 dark:bg-gray-800" role="alert">-->
        <!-- </div>-->
        <!--
        <div class="main_value">
            <select asp-for="MedicalRecord.AppointmentId" id="apmId" class="hidden" asp-items="ViewBag.AppointmentId"></select>
            <select asp-for="MedicalRecord.PatientId" id="patientId" class="hidden" asp-items="ViewBag.PatientId"></select>
            <select asp-for="MedicalRecord.DoctorId" id="doctorId" class="hidden" asp-items="ViewBag.DoctorId"></select>
        </div>
        <div class="flex justify-between mb-4">
            <button type="button" onclick="abc()" class="text-blue-500 text-md font-semibold">Export to file Word</button>
            <p id="floating_visit_time" class="font-bold text-md-center text-gray-900"></p>
        </div>
        -->

        <div>
            <div class="relative z-0 w-full mb-5 group">
                <label for="floating_fname" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Full name <span style="color: red">*</span>
                    <span id="erfn" class="text-danger text-red-500 ml-1"></span>

                </label>
                <input required value="@(Model.Users != null ? Model.Users.Name : "")" oninput="stopEnterCharacter()" onblur="validate('fullname')" name="@Html.NameFor(a => a.Users.Name)" type="text" id="floating_fname" aria-label="disabled input" class="mb-5  border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">

            </div>
            <div class="grid md:grid-cols-2 md:gap-6">
                <div class="relative z-0 w-full mb-5 group">
                    <label for="floating_uname" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Username
                        @if (Model.ErrorType == "Username")
                        {
                            <span style="color: red">* @Model.ErrorMessage</span>
                        }
                        @if (Model.ErrorType != "Username")
                        {
                            <span style="color: red">*</span>
                        }
                        <span id="erfn" class="text-danger text-red-500 ml-1"></span>

                    </label>
                    <input value="@(Model.Users != null ? Model.Users.Username : "")" required oninput="stopEnterCharacter()" onblur="validate('username')" name="@Html.NameFor(a => a.Users.Username)" type="text" id="floating_uname" aria-label="disabled input" class="mb-5  border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">

                </div>
                <div class="relative z-0 w-full mb-5 group">
                    Role
                    <select id="role" onchange="getRole()" name="@Html.NameFor(a => a.Users.RoleId)" style="font-weight: 450" class="border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        @foreach (var item in Model.roles)
                        {
                            <option selected="@(Model.Users != null ? Model.Users.RoleId == item.RoleId : item.RoleId == 1)" class="border border-gray-300 !text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" title="@item.RoleName" class="w-full" value="@item.RoleId">@item.RoleName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="grid md:grid-cols-2 md:gap-6">
                <div class="relative z-0 w-full mb-5 group">
                    <label for="floating_dob" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Date of Birth <span style="color: red">*</span>
                        <span id="erdob" max="@DateTime.Now.ToString("yyyy-MM-dd")" class="text-danger text-red-500 ml-1"></span>
                    </label>
                    <input value="@(Model.Users != null ? Model.Users.Dob.ToString("yyyy-MM-dd") : "")" required onblur="validate('dob')" name="@Html.NameFor(a => a.Users.Dob)" type="date" id="floating_dob" aria-label="disabled input" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
                <div class="relative z-0 w-full mb-5 group">
                    <label for="floating_phone" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Phone Number
                        @if (Model.ErrorType == "Phone")
                        {
                            <span style="color: red">* @Model.ErrorMessage</span>
                        }
                        @if (Model.ErrorType != "Phone")
                        {
                            <span style="color: red">*</span>
                        }
                        <span id="erpn" class="text-danger text-red-500 ml-1"></span>
                    </label>
                    <input value="@(Model.Users != null ? Model.Users.PhoneNumber : "")" required oninput="stopEnterCharacter()" onblur="validate('phone')" name="@Html.NameFor(a => a.Users.PhoneNumber)" type="tel" id="floating_phone" aria-label="disabled input" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
            </div>
            <div class="grid md:grid-cols-2 md:gap-6">
                <div class="relative z-0 w-full mb-5 group">
                    <label for="floating_email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Email
                        @if (Model.ErrorType == "Email")
                        {
                            <span style="color: red">* @Model.ErrorMessage</span>
                        }
                        @if (Model.ErrorType != "Email")
                        {
                            <span style="color: red">*</span>
                        }
                        <span id="ere" class="text-danger text-red-500 ml-1"></span>
                    </label>
                    <input value="@(Model.Users != null ? Model.Users.Email : "")" required oninput="stopEnterCharacter()" onblur="validate('email')" name="@Html.NameFor(a => a.Users.Email)" type="email" id="floating_email" aria-label="disabled input" class="mb-5  border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
                <div class="relative z-0 w-full mb-5 group">
                    <label for="floating_email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Gender <span style="color: red">*</span>
                        <span id="ere" class="text-danger text-red-500 ml-1"></span>
                    </label>
                    <div style="margin-top: 15px" class="flex items-center">
                        <div class="flex items-center mr-4">
                            <input id="default-radio-1" checked="@(Model.Users != null ? Model.Users.Gender == true : true)" type="radio" value="male" name="Gender" class="w-4 h-4 cursor-pointer text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                            <label for="default-radio-1" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Male</label>
                        </div>
                        <div class="flex items-center">
                            <input checked id="default-radio-2" checked="@(Model.Users != null ? Model.Users.Gender == false : false)" type="radio" value="female" name="Gender" class="w-4 h-4 cursor-pointer text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                            <label for="default-radio-2" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Female</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="relative z-0 w-full mb-5 group">
                <label for="floating_address" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Address <span style="color: red">*</span>
                    <span id="erad" class="text-danger text-red-500 ml-1"></span>
                </label>
                <input value="@(Model.Users != null ? Model.Users.Address : "")" required oninput="stopEnterCharacter()" onblur="validate('address')" name="@Html.NameFor(a => a.Users.Address)" type="text" id="floating_address" aria-label="disabled input" class="mb-5  border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
            </div>

            <div id="healthInsurance" class="relative @(Model.Users == null || (Model.Users != null && Model.Users.Role.RoleName == "Patient") ? "" : "hidden" ) z-0 w-full mb-5 group">
                <label for="floating_insurance" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Health Insurance <span style="color: red">*</span>
                    <span id="erhi" class="text-danger text-red-500 ml-1"></span>
                </label>
                <input name="HealthInsurance" value="@(Model.Users != null && Model.Users.Role.RoleName == "Patient" ? Model.HealthInsurance : "")" type="text" id="floating_insurance" aria-label="disabled input" class="mb-5  border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
            </div>
            <div id="receptionist" class=" @((Model.Users != null && Model.Users.Role.RoleName != "Patient") ? "" : "hidden" ) ">
                <div class="grid md:grid-cols-2 md:gap-6">
                    <div class="relative z-0 w-full mb-5 group">
                        <label for="floating-hd" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Hired Date
                            <span id="erhd" class="text-danger text-red-500 ml-1"></span>
                        </label>
                        <input name="HiredDate" value="@(Model.Users != null && Model.Users.Role.RoleName != "Patient" ? Model.HiredDate.ToString("yyyy-MM-dd") : "")" type="date" id="floating_hd" aria-label="disabled input" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">

                    </div>
                    <div class="relative z-0 w-full mb-5 group">
                        <label for="floating-nid" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            National Id
                            @if (Model.ErrorType == "NationalId")
                            {
                                <span style="color: red">* @Model.ErrorMessage</span>
                            }
                            @if (Model.ErrorType != "NationalId")
                            {
                                <span style="color: red">*</span>
                            }
                            <span id="ernid" class="text-danger text-red-500 ml-1"></span>
                        </label>
                        <input name="NationalId" value="@(Model.Users != null && Model.Users.Role.RoleName != "Patient" ? Model.NationalId : "")" type="text" id="floating_nid" aria-label="disabled input" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                    </div>
                </div>

                <div class="mb-5">
                    <h3 class="text-sm mb-1 text-gray-900 font-bold">Branch</h3>
                    @if (Model.Users != null && Model.Users.Role.RoleName != "Patient")
                    {
                        <select name="BranchId" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            @foreach (var item in Model.Branchs)
                            {
                                <option selected="@(item.BranchId == Model.BranchId)" class="border border-gray-300 !text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" title="@item.BranchName" class="w-full" value="@item.BranchId">@item.BranchName</option>
                            }
                        </select>
                    }
                    @if (!(Model.Users != null && Model.Users.Role.RoleName != "Patient"))
                    {
                        <select name="BranchId" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            @foreach (var item in Model.Branchs)
                            {
                                <option class="border border-gray-300 !text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" title="@item.BranchName" class="w-full" value="@item.BranchId">@item.BranchName</option>
                            }
                        </select>
                    }
                </div>
            </div>

            <div id="doctor" class="@((Model.Users != null && Model.Users.Role.RoleName == "Doctor") ? "" : "hidden" ) ">
                <div class="mb-5">
                    <h3 class="text-sm mb-1 text-gray-900 font-bold">
                        Specialist <span style="color: red">*</span>
                    </h3>
                    @if (Model.Users != null && Model.Users.Role.RoleName == "Doctor")
                    {
                        <select name="SpecialistId" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            @foreach (var item in Model.Specialists)
                            {
                                <option selected="@(item.SpecialistId == Model.SpecialistId)" class="border border-gray-300 !text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" title="@item.SpecialistName" class="w-full" value="@item.SpecialistId">@item.SpecialistName</option>
                            }
                        </select>
                    }
                    @if (!(Model.Users != null && Model.Users.Role.RoleName == "Doctor"))
                    {
                        <select name="SpecialistId" class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            @foreach (var item in Model.Specialists)
                            {
                                <option class="border border-gray-300 !text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 cursor-dafault dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" title="@item.SpecialistName" class="w-full" value="@item.SpecialistId">@item.SpecialistName</option>
                            }
                        </select>
                    }
                </div>
            </div>
        </div>
        <div class="grid md:grid-cols-2 md:gap-6">
        </div>

        <div class="flex mb-5 flex-row items-center justify-between">

            <div class="flex justify-start items-center">
                <div>
                    <a asp-page="./Index" class="h-25 text-blue-700  border border-blue-700 hover:bg-blue-800 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-8 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Back</a>
                </div>
                <div>
                    <button type="submit" id="btnSubmit" class="ml-2 h-25 cursor-pointer text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-8 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Create</button>
                </div>
            </div>
        </div>

    </form>
</div>
<script src="./../js/export.js"></script>
<script src="./../js/createjs.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.2/jquery.validate.min.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js"></script>



<script>
    function getRole() {
        var selectElement = document.getElementById("role");
        var selectedOptionText = selectElement.options[selectElement.selectedIndex].text;
        switch (selectedOptionText) {
            case "Patient": {
                displayPatient();
                hideReceptionist();
                hideDoctor();
                break;
            }
            case "Doctor": {
                hidePatient();
                displayReceptionist();
                displayDoctor();
                break;
            }
            case "Receptionist": {
                hidePatient();
                displayReceptionist();
                hideDoctor();
                break;
            }
            case "Admin": {
                hidePatient();
                displayReceptionist();
                hideDoctor();
                break;
            }
        }
    }

    function displayPatient() {
        if (document.getElementById("healthInsurance").classList.contains("hidden")) {
            document.getElementById("healthInsurance").classList.remove("hidden");
        }
    }

    function hidePatient() {
        if (!document.getElementById("healthInsurance").classList.contains("hidden")) {
            document.getElementById("healthInsurance").classList.add("hidden");
        }
    }


    function displayReceptionist() {
        if (document.getElementById("receptionist").classList.contains("hidden")) {
            document.getElementById("receptionist").classList.remove("hidden");
        }
    }

    function hideReceptionist() {
        if (!document.getElementById("receptionist").classList.contains("hidden")) {
            document.getElementById("receptionist").classList.add("hidden");
        }
    }

    function displayDoctor() {
        if (document.getElementById("doctor").classList.contains("hidden")) {
            document.getElementById("doctor").classList.remove("hidden");
        }
    }

    function hideDoctor() {
        if (!document.getElementById("doctor").classList.contains("hidden")) {
            document.getElementById("doctor").classList.add("hidden");
        }
    }
</script>

<script type="module">

    import { getAuth } from 'https://www.gstatic.com/firebasejs/10.12.3/firebase-auth.js'
    import { getFirestore } from 'https://www.gstatic.com/firebasejs/10.12.3/firebase-firestore.js'        // Import the functions you need from the SDKs you need
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-analytics.js";
    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyBRd5bTqtnunUXWwnwpm_VVplkSSBZQt9o",
        authDomain: "basiha-medical-37e74.firebaseapp.com",
        projectId: "basiha-medical-37e74",
        storageBucket: "basiha-medical-37e74.appspot.com",
        messagingSenderId: "541023299159",
        appId: "1:541023299159:web:1b9a60e9bf4146d3b4e512",
        measurementId: "G-VLVQQR9FVH"
    };

    // Initialize Firebase
    const app = firebase.initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);



</script>

<script>
    function test() {
        var toast = document.getElementById("toast-success-create");
        toast.classList.remove("animate-[fade-out_2s_ease-out_1s_1_forwards]");
        void toast.offsetWidth;
        toast.classList.add("animate-[fade-out_2s_ease-out_1s_1_forwards]");
        document.getElementById('animateDiv-create').classList.add("reduceWidth");
        document.getElementById('animateDiv-create').style.width = '0%';
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        var toast = document.getElementById("toast-success-create");
        if (toast.classList.contains("block")) {
            document.getElementById('animateDiv-create').classList.add("reduceWidth");
            document.getElementById('animateDiv-create').style.width = '0%';


        }

        function onTransitionEnd(event) {
            if (event.propertyName === 'width' && animateDiv.style.width === '0%') {
                document.getElementById('animateDiv-create').classList.remove("reduceWidth");
                //    document.getElementById('animateDiv').style.width = '100%';
                //  console.log(document.getElementById('animateDiv').style.width);
                //   toast.classList.add("animate-[fade-out_1s_ease-out_0.25s_1]");

            }
        }



        animateDiv.addEventListener('transitionend', onTransitionEnd);
    });
</script>

<script>



    function sbmit(mode) {
        var url = !window.location.href.includes("&Mde") ? window.location.href + "&Mde=" + mode : window.location.href.replace("&Mde=True", "").replace("&Mde=False", "") + "&Mde=" + mode
        window.location.href = url;
    }

    function stopEnterCharacter() {
        var txtFN = document.getElementById("floating_fname").value;
        var txtAddress = document.getElementById("floating_address").value;
        var txtPhone = document.getElementById("floating_phone").value;
        var txtEmail = document.getElementById("floating_email").value;

        var erfn = document.getElementById("erfn");
        var erad = document.getElementById("erad");
        var erdob = document.getElementById("erdob");
        var erpn = document.getElementById("erpn");
        var ere = document.getElementById("ere");
        var errt = document.getElementById("errt");
        var erd = document.getElementById("erd");

        if (txtFN.length >= 30) {
            document.getElementById("floating_fname").value = txtFN.substring(0, 30);
            erfn.innerHTML = "Maximum length of full name is 30";
            document.getElementById("btnSubmit").disabled = true;

            if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
            }
        }
        else {
            erfn.innerHTML = "";
            document.getElementById("btnSubmit").disabled = false;
            document.getElementById("btnSubmit").classList.add("cursor-pointer");
            document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
            document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
        }
        if (txtAddress.length >= 50) {
            document.getElementById("floating_address").value = txtAddress.substring(0, 50);
            erad.innerHTML = "Maximum length of address is 50";
            document.getElementById("btnSubmit").disabled = true;

            if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
            }
        }
        else {
            document.getElementById("btnSubmit").disabled = false;
            erad.innerHTML = "";
            document.getElementById("btnSubmit").classList.add("cursor-pointer");
            document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
            document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
        }
        if (txtPhone.length >= 20) {
            document.getElementById("floating_phone").value = txtPhone.substring(0, 20);
            erpn.innerHTML = "Maximum length of phone is 20";
            document.getElementById("btnSubmit").disabled = true;

            if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
            }
        }
        else {
            document.getElementById("btnSubmit").disabled = false;

            erpn.innerHTML = "";
            document.getElementById("btnSubmit").classList.add("cursor-pointer");
            document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
            document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
        }
        if (txtEmail.length >= 50) {
            document.getElementById("floating_email").value = txtEmail.substring(0, 50);
            ere.innerHTML = "Maximum length of email is 50";
            document.getElementById("btnSubmit").disabled = true;

            if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
            }
        }
        else {
            document.getElementById("btnSubmit").disabled = false;

            ere.innerHTML = "";
            document.getElementById("btnSubmit").classList.add("cursor-pointer");
            document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
            document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
        }

    }



    function validatePhoneNumber(phone) {
        // Regular expression for validating a Vietnam phone number
        const re = /^(03|05|07|08|09)\d{8}$/;
        return re.test(phone);
    }

    function validateRDate(dateValue) {
        // Get the current date and time
        const now = new Date();
        // Add 30 minutes to the current date and time
        const nowPlus30Minutes = new Date(now.getTime() + 30 * 60000);

        // Convert the input date value to a Date object
        const inputDate = new Date(dateValue);
        // Check if the input date is greater than or equal to the current date plus 30 minutes
        return inputDate >= nowPlus30Minutes;
    }

    function validateDob(dateValue) {
        const now = new Date();
        const inputDate = new Date(dateValue);
        return inputDate <= now;
    }

    function validate(str) {
        var txtFN = document.getElementById("floating_fname").value;
        var txtAddress = document.getElementById("floating_address").value;
        var txtDob = document.getElementById("floating_dob").value;
        var txtPhone = document.getElementById("floating_phone").value;
        var txtEmail = document.getElementById("floating_email").value;
        var txtRtime = document.getElementById("floating_hd").value;

        var erfn = document.getElementById("erfn");
        var erad = document.getElementById("erad");
        var erdob = document.getElementById("erdob");
        var erpn = document.getElementById("erpn");
        var ere = document.getElementById("ere");
        var errt = document.getElementById("errt");
        var erd = document.getElementById("erd");
        switch (str) {
            case "fullname": {
                if (txtFN.length == 0) {
                    erfn.innerHTML = "Full name is required";
                    document.getElementById("btnSubmit").disabled = true;
                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else if (txtFN.length <= 3) {
                    erfn.innerHTML = "Minimum length of full name is 3";
                    document.getElementById("btnSubmit").disabled = true;
                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else {
                    document.getElementById("btnSubmit").disabled = false;

                    erfn.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "address": {
                if (txtAddress.length == 0) {
                    erad.innerHTML = "Address is required";
                    document.getElementById("btnSubmit").disabled = true;
                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else if (txtFN.length <= 3) {
                    erad.innerHTML = "Minimum length of address is 3";
                    document.getElementById("btnSubmit").disabled = true;
                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else {
                    document.getElementById("btnSubmit").disabled = false;

                    erad.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "dob": {
                if (txtDob.length == 0) {
                    erdob.innerHTML = "Date of birth is required";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else if (!validateDob(txtDob)) {
                    erdob.innerHTML = "You must atleast 1 years old";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }

                else {
                    document.getElementById("btnSubmit").disabled = false;

                    erdob.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "phone": {
                if (txtPhone.length == 0) {
                    erpn.innerHTML = "Phone is required";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else if (!validatePhoneNumber(txtPhone)) {
                    erpn.innerHTML = "Wrong format phone number";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else {
                    document.getElementById("btnSubmit").disabled = false;

                    erpn.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "email": {
                if (txtEmail.length == 0) {
                    ere.innerHTML = "Email is required";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }

                else {
                    document.getElementById("btnSubmit").disabled = false;

                    ere.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "requestedtime": {
                if (txtRtime.length == 0) {
                    errt.innerHTML = "Requested time is required";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else if (!validateRDate(txtRtime)) {
                    errt.innerHTML = "Requested time must atleast 30 minutes from now";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else {
                    document.getElementById("btnSubmit").disabled = false;

                    errt.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
            case "description": {
                if (txtDescription.length == 0) {
                    erd.innerHTML = "Description is required";
                    document.getElementById("btnSubmit").disabled = true;

                    if (document.getElementById("btnSubmit").classList.contains("cursor-pointer") && document.getElementById("btnSubmit").classList.contains("hover:bg-blue-800")) {
                        document.getElementById("btnSubmit").classList.remove("cursor-pointer");
                        document.getElementById("btnSubmit").classList.add("cursor-not-allowed");
                        document.getElementById("btnSubmit").classList.remove("hover:bg-blue-800");
                    }
                }
                else {
                    document.getElementById("btnSubmit").disabled = false;

                    erd.innerHTML = "";
                    document.getElementById("btnSubmit").classList.add("cursor-pointer");
                    document.getElementById("btnSubmit").classList.remove("cursor-not-allowed");
                    document.getElementById("btnSubmit").classList.add("hover:bg-blue-800");
                }
                break;
            }
        }
    }


</script>


<script>
    /*
    let timeInMinutes = 0.5;
    let timeInSeconds = timeInMinutes * 60;
    const countdownElement = document.getElementById('countdown');

    const updateCountdown = () => {
        const minutes = Math.floor(timeInSeconds / 60);
        const seconds = timeInSeconds % 60;

        countdownElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        if (timeInSeconds > 0) {
            timeInSeconds--;
        } else {
            clearInterval(countdownInterval);
            countdownElement.style.color = "red";
        }
    };

    const countdownInterval = setInterval(updateCountdown, 1000);
    */
</script>

